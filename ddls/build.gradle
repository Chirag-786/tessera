buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath project(":tessera-data")
    classpath project(":eclipselink-utils")
    classpath "jakarta.persistence:jakarta.persistence-api"
    classpath "org.eclipse.persistence:org.eclipse.persistence.jpa"
    classpath "org.eclipse.persistence:org.eclipse.persistence.extension"
    classpath "org.hsqldb:hsqldb"
    classpath "org.xerial:sqlite-jdbc"
    classpath 'com.oracle.database.jdbc:ojdbc11:21.3.0.0'
    classpath 'mysql:mysql-connector-java:8.0.26'
    classpath 'org.postgresql:postgresql:42.2.24'
  }
}

dependencies {
  //  implementation project(":tessera-data")
  //  implementation project(":eclipselink-utils")
  //  implementation "jakarta.persistence:jakarta.persistence-api"
  //
  //  implementation "org.eclipse.persistence:org.eclipse.persistence.jpa"
  //  implementation "org.eclipse.persistence:org.eclipse.persistence.extension"
  //  implementation "com.zaxxer:HikariCP"
  //  implementation "org.eclipse.persistence:org.eclipse.persistence.jpa"
  //  implementation "org.eclipse.persistence:org.eclipse.persistence.extension"
  //
  //  implementation "org.hsqldb:hsqldb"
  //  implementation "org.xerial:sqlite-jdbc"
  //
  //  implementation "jakarta.transaction:jakarta.transaction-api"

  //  implementation 'com.oracle.database.jdbc:ojdbc11:21.3.0.0'
  //  implementation 'mysql:mysql-connector-java:8.0.26'
  //
  //  implementation 'org.postgresql:postgresql:42.2.24'

}

sourceSets {
  main {
    resources {
      srcDir "create-table"
    }
  }
}


tasks.register("schemagen") {
  dependsOn processResources



  def configs = [
    [
      'database':'h2',
      'jakarta.persistence.jdbc.url':'jdbc:h2:mem:;MODE=Oracle',
      'jakarta.persistence.jdbc.user':'sa',
      'jakarta.persistence.jdbc.password':''
    ],
    [
      'database':'hsqldb',
      'jakarta.persistence.jdbc.url':'jdbc:hsqldb:mem:test',
      'jakarta.persistence.jdbc.user':'sa',
      'jakarta.persistence.jdbc.password':''
    ],
    [
      'database':'sqlite',
      'jakarta.persistence.jdbc.url':'jdbc:sqlite:file::memory:?cache=shared',
      'jakarta.persistence.jdbc.user':'sa',
      'jakarta.persistence.jdbc.password':''
    ],
    //    [
    //      'database':'mysql',
    //      'jakarta.persistence.jdbc.url':'jdbc:mysql://localhost/test',
    //      'jakarta.persistence.jdbc.user':'scott',
    //      'jakarta.persistence.jdbc.password':'tiger'
    //    ],
    //    [
    //      'database':'oracle',
    //      'jakarta.persistence.jdbc.url':'jdbc:oracle:thin:@//192.168.2.1:1521/XE',
    //      'jakarta.persistence.jdbc.user':'scott',
    //      'jakarta.persistence.jdbc.password':'tiger'
    //    ],
    //    [
    //      'database':'postgres',
    //      'jakarta.persistence.jdbc.url':'jdbc:postgresql://localhost/test',
    //      'jakarta.persistence.jdbc.user':'sweaty',
    //      'jakarta.persistence.jdbc.password':'punk'
    //    ]

  ]


  doFirst {

    //Weird load driver hack
    Class.forName('org.hsqldb.jdbc.JDBCDriver')
    Class.forName('org.sqlite.JDBC')
    Class.forName("oracle.jdbc.driver.OracleDriver")
    Class.forName("com.mysql.jdbc.Driver")
    Class.forName("org.postgresql.Driver")

    def f = file("${buildDir}/generated-resources/ddl/")
    f.parentFile.mkdirs()
  }

  doLast {

    configs.forEach(props -> {
      def database = props['database']
      props['jakarta.persistence.schema-generation.create-source'] = 'script'
      props['jakarta.persistence.schema-generation.create-script-source'] = "${buildDir}/resources/main/${database}-ddl.sql"
      props['jakarta.persistence.schema-generation.scripts.action'] = 'create'
      props['eclipselink.ddlgen-terminate-statements'] = 'true'
      props['eclipselink.weaving'] = 'false'
      props['eclipselink.weaving.internal'] = 'false'
      props['eclipselink.logging.level'] = "FINEST"
      props['eclipselink.logging.connection'] = "true"
      props['eclipselink.logging.level.connection'] = 'FINE'
      props['eclipselink.logging.level.jpa'] = 'FINER'
      props['eclipselink.logging.level.sql'] = 'FINEST'
      props['eclipselink.logging.file'] = "build/mylog.log"
      props['eclipselink.logging.level.sql'] = 'ALL'
      props['eclipselink.logging.parameters'] = 'true'
      props['eclipselink.jpa.uppercase-column-names'] = 'true'

      props['eclipselink.session.customizer'] = com.quorum.tessera.eclipselink.AtomicLongSequence.class.name
      //  props['eclipselink.jpql.validation'] = 'JPA 2.1'
      //   props['eclipselink.ddl-generation'] = 'create-or-extend-tables'
      //   props['eclipselink.ddl-generation.output-mode'] = 'sql-script'
      props['eclipselink.deploy-on-startup'] = 'true'
      //props['eclipselink.id-validation'] = 'NULL'

      props['eclipselink.validation-only'] = "false"
      //props['eclipselink.target-database'] = "org.eclipse.persistence.platform.database.HSQLPlatform"

      props['jakarta.persistence.schema-generation.scripts.create-target']
      = "${buildDir}/generated-resources/${database}-tessera-ddl.sql"
      jakarta.persistence.Persistence.generateSchema("tessera", props)

      props['jakarta.persistence.schema-generation.scripts.create-target']
      = "${buildDir}/generated-resources/${database}-tessera-recover-ddl.sql"
      jakarta.persistence.Persistence.generateSchema("tessera-recover", props)
    })
  }
}
